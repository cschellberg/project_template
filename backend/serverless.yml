org: dsschellberg
app: template-backend-app
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: template-backend

plugins:
  localPath: './plugins'
  modules:
    - serverless-webpack
    - serverless-prune-plugin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  httpApi:
    payload: "1.0"
    name: melschellGateway
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - "Content-Type"
        - "X-Amz-Date"
        - "Authorization"
        - "X-Api-Key"
        - "X-Amz-Security-Token"
        - "X-Amz-User-Agent"
        - disablefeatureset
        - featureset
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - HEAD
        - DELETE
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action: logs:CreateLogGroup
      Resource: arn:aws:logs:us-east-1:277777067317:*
    - Effect: Allow
      Action:
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - !Join
          -  ":"
          - - arn:aws:logs:${self:provider.region}
            - !Ref AWS::AccountId
            - log-group:/aws/lambda/template-backend-${self:provider.stage}-*:*
    - Effect: Allow
      Action:
        - ses:*
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"

# you can define service wide environment variables here
  environment:
    STAGE: ${self:provider.stage}
  stackTags:
    owner: "melschell"

custom:
  env: ${file(./env/${self:provider.stage}-${self:provider.region}.yml)}


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  sendEmail:
    handler: src/lambdas/emailer.sendEmail
    events:
      - httpApi:
          method: POST
          path: /post/email
    tags:
      FunctionName: sendEmail
      Owner: MelSchell

  getUsers:
    handler: src/lambdas/user-handler.getUsers
    events:
      - httpApi:
          method: get
          path: /users
    tags:
      FunctionName: getUsers
      Owner: MelSchell

  addUser:
    handler: src/lambdas/user-handler.addUser
    events:
      - httpApi:
          method: put
          path: /users
    tags:
      FunctionName: addUser
      Owner: MelSchell

  deleteUser:
    handler: src/lambdas/user-handler.deleteUser
    events:
      - httpApi:
          method: delete
          path: /users/{email}
    tags:
      FunctionName: addUser
      Owner: MelSchell
#  graphql:
#    handler: src/lambdas/graphql.graphqlHandler
#    events:
#      - httpApi:
#          method: post
#          path: /graphql
#      - httpApi:
#          method: get
#          path: /graphql
#    tags:
#      FunctionName: sendEmail
#      Owner: MelSchell

resources:
  Resources:
    BackendTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: backend-data-${self:provider.stage}
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"
        AttributeDefinitions:
          -
            AttributeName: 'pk'
            AttributeType: 'S'
          -
            AttributeName: 'sk'
            AttributeType: 'S'
        KeySchema:
          -
            AttributeName: 'pk'
            KeyType: 'HASH'
          -
            AttributeName: 'sk'
            KeyType: 'RANGE'
        GlobalSecondaryIndexes:
          -
            IndexName: sort_key_index
            KeySchema:
              -
                AttributeName: 'sk'
                KeyType: 'HASH'
              -
                AttributeName: 'pk'
                KeyType: 'RANGE'
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"







